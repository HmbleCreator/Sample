"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a";
exports.ids = ["vendor-chunks/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/createHooksInternal-063195fc.mjs":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/createHooksInternal-063195fc.mjs ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCContext),\n/* harmony export */   a: () => (/* binding */ createReactQueryUtilsProxy),\n/* harmony export */   b: () => (/* binding */ createReactProxyDecoration),\n/* harmony export */   c: () => (/* binding */ createHooksInternal),\n/* harmony export */   d: () => (/* binding */ getClientArgs),\n/* harmony export */   e: () => (/* binding */ createUseQueriesProxy),\n/* harmony export */   f: () => (/* binding */ createRootHooks),\n/* harmony export */   g: () => (/* binding */ getQueryKey),\n/* harmony export */   h: () => (/* binding */ contextProps)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getArrayQueryKey-86134f8b.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\");\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/@tanstack/react-query/build/lib/useQuery.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+query-core@4.36.1/node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/@tanstack/react-query/build/lib/useQueries.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_@babel+core@7.28.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n\n\n/**\n * We treat `undefined` as an input the same as omitting an `input`\n * https://github.com/trpc/trpc/issues/2290\n */ function getQueryKeyInternal(path, input) {\n    if (path.length) return input === undefined ? [\n        path\n    ] : [\n        path,\n        input\n    ];\n    return [];\n}\n/**\n * Method to extract the query key for a procedure\n * @param procedureOrRouter - procedure or AnyRouter\n * @param input - input to procedureOrRouter\n * @param type - defaults to `any`\n * @link https://trpc.io/docs/getQueryKey\n */ function getQueryKey(..._params) {\n    const [procedureOrRouter, input, type] = _params;\n    // @ts-expect-error - we don't expose _def on the type layer\n    const path = procedureOrRouter._def().path;\n    const dotPath = path.join(\".\");\n    const queryKey = (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(getQueryKeyInternal(dotPath, input), type ?? \"any\");\n    return queryKey;\n}\n/**\n * Create proxy for decorating procedures\n * @internal\n */ function createReactProxyDecoration(name, hooks) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)((opts)=>{\n        const args = opts.args;\n        const pathCopy = [\n            name,\n            ...opts.path\n        ];\n        // The last arg is for instance `.useMutation` or `.useQuery()`\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const lastArg = pathCopy.pop();\n        // The `path` ends up being something like `post.byId`\n        const path = pathCopy.join(\".\");\n        if (lastArg === \"useMutation\") {\n            return hooks[lastArg](path, ...args);\n        }\n        const [input, ...rest] = args;\n        const queryKey = getQueryKeyInternal(path, input);\n        // Expose queryKey helper\n        if (lastArg === \"getQueryKey\") {\n            return (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, rest[0] ?? \"any\");\n        }\n        if (lastArg === \"_def\") {\n            return {\n                path: pathCopy\n            };\n        }\n        if (lastArg.startsWith(\"useSuspense\")) {\n            const opts1 = rest[0] || {};\n            const fn = lastArg === \"useSuspenseQuery\" ? \"useQuery\" : \"useInfiniteQuery\";\n            const result = hooks[fn](queryKey, {\n                ...opts1,\n                suspense: true,\n                enabled: true\n            });\n            return [\n                result.data,\n                result\n            ];\n        }\n        return hooks[lastArg](queryKey, ...rest);\n    });\n}\nconst contextProps = [\n    \"client\",\n    \"ssrContext\",\n    \"ssrState\",\n    \"abortOnUnmount\"\n];\nconst TRPCContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * @internal\n */ function createReactQueryUtilsProxy(context) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createFlatProxy)((key)=>{\n        const contextName = key;\n        if (contextName === \"client\") {\n            return (0,_trpc_client__WEBPACK_IMPORTED_MODULE_2__.createTRPCClientProxy)(context.client);\n        }\n        if (contextProps.includes(contextName)) {\n            return context[contextName];\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)(({ path, args })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const utilName = pathCopy.pop();\n            const fullPath = pathCopy.join(\".\");\n            const getOpts = (name)=>{\n                if ([\n                    \"setData\",\n                    \"setInfiniteData\"\n                ].includes(name)) {\n                    const [input, updater, ...rest] = args;\n                    const queryKey = getQueryKeyInternal(fullPath, input);\n                    return {\n                        queryKey,\n                        updater,\n                        rest\n                    };\n                }\n                const [input1, ...rest1] = args;\n                const queryKey1 = getQueryKeyInternal(fullPath, input1);\n                return {\n                    queryKey: queryKey1,\n                    rest: rest1\n                };\n            };\n            const { queryKey, rest, updater } = getOpts(utilName);\n            const contextMap = {\n                fetch: ()=>context.fetchQuery(queryKey, ...rest),\n                fetchInfinite: ()=>context.fetchInfiniteQuery(queryKey, ...rest),\n                prefetch: ()=>context.prefetchQuery(queryKey, ...rest),\n                prefetchInfinite: ()=>context.prefetchInfiniteQuery(queryKey, ...rest),\n                ensureData: ()=>context.ensureQueryData(queryKey, ...rest),\n                invalidate: ()=>context.invalidateQueries(queryKey, ...rest),\n                reset: ()=>context.resetQueries(queryKey, ...rest),\n                refetch: ()=>context.refetchQueries(queryKey, ...rest),\n                cancel: ()=>context.cancelQuery(queryKey, ...rest),\n                setData: ()=>{\n                    context.setQueryData(queryKey, updater, ...rest);\n                },\n                setInfiniteData: ()=>{\n                    context.setInfiniteQueryData(queryKey, updater, ...rest);\n                },\n                getData: ()=>context.getQueryData(queryKey),\n                getInfiniteData: ()=>context.getInfiniteQueryData(queryKey)\n            };\n            return contextMap[utilName]();\n        });\n    });\n}\n/**\n * Create proxy for `useQueries` options\n * @internal\n */ function createUseQueriesProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)((opts)=>{\n        const path = opts.path.join(\".\");\n        const [input, _opts] = opts.args;\n        const queryKey = getQueryKeyInternal(path, input);\n        const options = {\n            queryKey,\n            queryFn: ()=>{\n                return client.query(path, input, _opts?.trpc);\n            },\n            ..._opts\n        };\n        return options;\n    });\n}\nfunction getClientArgs(pathAndInput, opts) {\n    const [path, input] = pathAndInput;\n    return [\n        path,\n        input,\n        opts?.trpc\n    ];\n}\n/**\n * Makes a stable reference of the `trpc` prop\n */ function useHookResult(value) {\n    const { path } = value;\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>({\n            path\n        }), [\n        path\n    ]);\n}\n/**\n * @internal\n */ function createRootHooks(config) {\n    const mutationSuccessOverride = (config?.overrides ?? config?.unstable_overrides)?.useMutation?.onSuccess ?? ((options)=>options.originalFn());\n    const Context = config?.context ?? TRPCContext;\n    const ReactQueryContext = config?.reactQueryContext;\n    const createClient = (opts)=>{\n        return (0,_trpc_client__WEBPACK_IMPORTED_MODULE_2__.createTRPCClient)(opts);\n    };\n    const TRPCProvider = (props)=>{\n        const { abortOnUnmount = false, client, queryClient, ssrContext } = props;\n        const [ssrState, setSSRState] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(props.ssrState ?? false);\n        (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n            // Only updating state to `mounted` if we are using SSR.\n            // This makes it so we don't have an unnecessary re-render when opting out of SSR.\n            setSSRState((state)=>state ? \"mounted\" : false);\n        }, []);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(Context.Provider, {\n            value: {\n                abortOnUnmount,\n                queryClient,\n                client,\n                ssrContext: ssrContext ?? null,\n                ssrState,\n                fetchQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.fetchQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                fetchInfiniteQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.fetchInfiniteQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"infinite\"),\n                        queryFn: ({ pageParam })=>{\n                            const [path, input] = pathAndInput;\n                            const actualInput = {\n                                ...input,\n                                cursor: pageParam\n                            };\n                            return client.query(...getClientArgs([\n                                path,\n                                actualInput\n                            ], opts));\n                        }\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                prefetchQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.prefetchQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                prefetchInfiniteQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.prefetchInfiniteQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"infinite\"),\n                        queryFn: ({ pageParam })=>{\n                            const [path, input] = pathAndInput;\n                            const actualInput = {\n                                ...input,\n                                cursor: pageParam\n                            };\n                            return client.query(...getClientArgs([\n                                path,\n                                actualInput\n                            ], opts));\n                        }\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                ensureQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.ensureQueryData({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                invalidateQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryKey, filters, options)=>{\n                    return queryClient.invalidateQueries({\n                        ...filters,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"any\")\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                resetQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, filters, options] = args;\n                    return queryClient.resetQueries({\n                        ...filters,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"any\")\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                refetchQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, filters, options] = args;\n                    return queryClient.refetchQueries({\n                        ...filters,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"any\")\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                cancelQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput)=>{\n                    return queryClient.cancelQueries({\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"any\")\n                    });\n                }, [\n                    queryClient\n                ]),\n                setQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.setQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"query\"), ...rest);\n                }, [\n                    queryClient\n                ]),\n                getQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.getQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"query\"), ...rest);\n                }, [\n                    queryClient\n                ]),\n                setInfiniteQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.setQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"infinite\"), ...rest);\n                }, [\n                    queryClient\n                ]),\n                getInfiniteQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.getQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"infinite\"), ...rest);\n                }, [\n                    queryClient\n                ])\n            }\n        }, props.children);\n    };\n    function useContext() {\n        return react__WEBPACK_IMPORTED_MODULE_3__.useContext(Context);\n    }\n    /**\n   * Hack to make sure errors return `status`='error` when doing SSR\n   * @link https://github.com/trpc/trpc/pull/1645\n   */ function useSSRQueryOptionsIfNeeded(pathAndInput, type, opts) {\n        const { queryClient, ssrState } = useContext();\n        return ssrState && ssrState !== \"mounted\" && queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, type))?.state.status === \"error\" ? {\n            retryOnMount: false,\n            ...opts\n        } : opts;\n    }\n    function useQuery$1(pathAndInput, opts) {\n        const context = useContext();\n        if (!context) {\n            throw new Error(\"Unable to retrieve application context. Did you forget to wrap your App inside `withTRPC` HoC?\");\n        }\n        const { abortOnUnmount, client, ssrState, queryClient, prefetchQuery } = context;\n        const defaultOpts = queryClient.getQueryDefaults((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"));\n        if ( true && ssrState === \"prepass\" && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"))) {\n            void prefetchQuery(pathAndInput, opts);\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, \"query\", {\n            ...defaultOpts,\n            ...opts\n        });\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? config?.abortOnUnmount ?? abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useQuery)({\n            ...ssrOpts,\n            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"),\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                return client.query(...getClientArgs(pathAndInput, actualOpts));\n            },\n            context: ReactQueryContext\n        });\n        hook.trpc = useHookResult({\n            path: pathAndInput[0]\n        });\n        return hook;\n    }\n    function useMutation$1(path, opts) {\n        const { client } = useContext();\n        const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.useQueryClient)({\n            context: ReactQueryContext\n        });\n        const actualPath = Array.isArray(path) ? path[0] : path;\n        const defaultOpts = queryClient.getMutationDefaults([\n            actualPath.split(\".\")\n        ]);\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__.useMutation)({\n            ...opts,\n            mutationKey: [\n                actualPath.split(\".\")\n            ],\n            mutationFn: (input)=>{\n                return client.mutation(...getClientArgs([\n                    actualPath,\n                    input\n                ], opts));\n            },\n            context: ReactQueryContext,\n            onSuccess (...args) {\n                const originalFn = ()=>opts?.onSuccess?.(...args) ?? defaultOpts?.onSuccess?.(...args);\n                return mutationSuccessOverride({\n                    originalFn,\n                    queryClient,\n                    meta: opts?.meta ?? defaultOpts?.meta ?? {}\n                });\n            }\n        });\n        hook.trpc = useHookResult({\n            path: actualPath\n        });\n        return hook;\n    }\n    /* istanbul ignore next -- @preserve */ function useSubscription(pathAndInput, opts) {\n        const enabled = opts?.enabled ?? true;\n        const queryKey = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__.hashQueryKey)(pathAndInput);\n        const { client } = useContext();\n        const optsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(opts);\n        optsRef.current = opts;\n        (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n            if (!enabled) {\n                return;\n            }\n            const [path, input] = pathAndInput;\n            let isStopped = false;\n            const subscription = client.subscription(path, input ?? undefined, {\n                onStarted: ()=>{\n                    if (!isStopped) {\n                        optsRef.current.onStarted?.();\n                    }\n                },\n                onData: (data)=>{\n                    if (!isStopped) {\n                        // FIXME this shouldn't be needed as both should be `unknown` in next major\n                        optsRef.current.onData(data);\n                    }\n                },\n                onError: (err)=>{\n                    if (!isStopped) {\n                        optsRef.current.onError?.(err);\n                    }\n                }\n            });\n            return ()=>{\n                isStopped = true;\n                subscription.unsubscribe();\n            };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            queryKey,\n            enabled\n        ]);\n    }\n    function useInfiniteQuery$1(pathAndInput, opts) {\n        const [path, input] = pathAndInput;\n        const { client, ssrState, prefetchInfiniteQuery, queryClient, abortOnUnmount } = useContext();\n        const defaultOpts = queryClient.getQueryDefaults((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"infinite\"));\n        if ( true && ssrState === \"prepass\" && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"infinite\"))) {\n            void prefetchInfiniteQuery(pathAndInput, {\n                ...defaultOpts,\n                ...opts\n            });\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, \"infinite\", {\n            ...defaultOpts,\n            ...opts\n        });\n        // request option should take priority over global\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.useInfiniteQuery)({\n            ...ssrOpts,\n            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"infinite\"),\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                const actualInput = {\n                    ...input ?? {},\n                    cursor: queryFunctionContext.pageParam ?? opts?.initialCursor\n                };\n                // FIXME as any shouldn't be needed as client should be untyped too\n                return client.query(...getClientArgs([\n                    path,\n                    actualInput\n                ], actualOpts));\n            },\n            context: ReactQueryContext\n        });\n        hook.trpc = useHookResult({\n            path\n        });\n        return hook;\n    }\n    const useQueries$1 = (queriesCallback, context)=>{\n        const { ssrState, queryClient, prefetchQuery, client } = useContext();\n        const proxy = createUseQueriesProxy(client);\n        const queries = queriesCallback(proxy);\n        if ( true && ssrState === \"prepass\") {\n            for (const query of queries){\n                const queryOption = query;\n                if (queryOption.trpc?.ssr !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryOption.queryKey, \"query\"))) {\n                    void prefetchQuery(queryOption.queryKey, queryOption);\n                }\n            }\n        }\n        return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueries)({\n            queries: queries.map((query)=>({\n                    ...query,\n                    queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(query.queryKey, \"query\")\n                })),\n            context\n        });\n    };\n    const useDehydratedState = (client, trpcState)=>{\n        const transformed = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n            if (!trpcState) {\n                return trpcState;\n            }\n            return client.runtime.transformer.deserialize(trpcState);\n        }, [\n            trpcState,\n            client\n        ]);\n        return transformed;\n    };\n    return {\n        Provider: TRPCProvider,\n        createClient,\n        useContext,\n        useUtils: useContext,\n        useQuery: useQuery$1,\n        useQueries: useQueries$1,\n        useMutation: useMutation$1,\n        useSubscription,\n        useDehydratedState,\n        useInfiniteQuery: useInfiniteQuery$1\n    };\n}\n/**\n * Create strongly typed react hooks\n * @internal\n * @deprecated\n */ function createHooksInternal(config) {\n    return createRootHooks(config);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/createHooksInternal-063195fc.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getArrayQueryKey)\n/* harmony export */ });\n/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n **/ function getArrayQueryKey(queryKey, type) {\n    const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [\n        queryKey\n    ];\n    const [path, input] = queryKeyArrayed;\n    const arrayPath = typeof path !== \"string\" || path === \"\" ? [] : path.split(\".\");\n    // Construct a query key that is easy to destructure and flexible for\n    // partial selecting etc.\n    // https://github.com/trpc/trpc/issues/3128\n    if (!input && (!type || type === \"any\")) // we don't want nested array if path is empty, i.e. `[]` instead of `[[]]`\n    return arrayPath.length ? [\n        arrayPath\n    ] : [];\n    return [\n        arrayPath,\n        {\n            ...typeof input !== \"undefined\" && {\n                input: input\n            },\n            ...type && type !== \"any\" && {\n                type: type\n            }\n        }\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrcmVhY3QtcXVlcnlAMTAuNDUuMl9AdGFuc3RhY2srcmVhY3QtcXVlcnlANC4zNi4xX3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wX19yXzliYTZhN2Q0MDdlYzNmNDk5ZTM2NmI0NGE0NTRhMzdhL25vZGVfbW9kdWxlcy9AdHJwYy9yZWFjdC1xdWVyeS9kaXN0L2dldEFycmF5UXVlcnlLZXktODYxMzRmOGIubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0VBTUUsR0FBRyxTQUFTQSxpQkFBaUJDLFFBQVEsRUFBRUMsSUFBSTtJQUN6QyxNQUFNQyxrQkFBa0JDLE1BQU1DLE9BQU8sQ0FBQ0osWUFBWUEsV0FBVztRQUN6REE7S0FDSDtJQUNELE1BQU0sQ0FBQ0ssTUFBTUMsTUFBTSxHQUFHSjtJQUN0QixNQUFNSyxZQUFZLE9BQU9GLFNBQVMsWUFBWUEsU0FBUyxLQUFLLEVBQUUsR0FBR0EsS0FBS0csS0FBSyxDQUFDO0lBQzVFLHFFQUFxRTtJQUNyRSx5QkFBeUI7SUFDekIsMkNBQTJDO0lBQzNDLElBQUksQ0FBQ0YsU0FBVSxFQUFDTCxRQUFRQSxTQUFTLEtBQUksR0FDckMsMkVBQTJFO0lBQzNFLE9BQU9NLFVBQVVFLE1BQU0sR0FBRztRQUN0QkY7S0FDSCxHQUFHLEVBQUU7SUFDTixPQUFPO1FBQ0hBO1FBQ0E7WUFDSSxHQUFHLE9BQU9ELFVBQVUsZUFBZTtnQkFDL0JBLE9BQU9BO1lBQ1gsQ0FBQztZQUNELEdBQUdMLFFBQVFBLFNBQVMsU0FBUztnQkFDekJBLE1BQU1BO1lBQ1YsQ0FBQztRQUNMO0tBQ0g7QUFDTDtBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRncHQtY2xvbmUvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrcmVhY3QtcXVlcnlAMTAuNDUuMl9AdGFuc3RhY2srcmVhY3QtcXVlcnlANC4zNi4xX3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wX19yXzliYTZhN2Q0MDdlYzNmNDk5ZTM2NmI0NGE0NTRhMzdhL25vZGVfbW9kdWxlcy9AdHJwYy9yZWFjdC1xdWVyeS9kaXN0L2dldEFycmF5UXVlcnlLZXktODYxMzRmOGIubWpzPzExNGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUbyBhbGxvdyBlYXN5IGludGVyYWN0aW9ucyB3aXRoIGdyb3VwcyBvZiByZWxhdGVkIHF1ZXJpZXMsIHN1Y2ggYXNcbiAqIGludmFsaWRhdGluZyBhbGwgcXVlcmllcyBvZiBhIHJvdXRlciwgd2UgdXNlIGFuIGFycmF5IGFzIHRoZSBwYXRoIHdoZW5cbiAqIHN0b3JpbmcgaW4gdGFuc3RhY2sgcXVlcnkuIFRoaXMgZnVuY3Rpb24gY29udmVydHMgZnJvbSB0aGUgYC5gIHNlcGFyYXRlZFxuICogcGF0aCBwYXNzZWQgYXJvdW5kIGludGVybmFsbHkgYnkgYm90aCB0aGUgbGVnYWN5IGFuZCBwcm94eSBpbXBsZW1lbnRhdGlvbi5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90cnBjL3RycGMvaXNzdWVzLzI2MTFcbiAqKi8gZnVuY3Rpb24gZ2V0QXJyYXlRdWVyeUtleShxdWVyeUtleSwgdHlwZSkge1xuICAgIGNvbnN0IHF1ZXJ5S2V5QXJyYXllZCA9IEFycmF5LmlzQXJyYXkocXVlcnlLZXkpID8gcXVlcnlLZXkgOiBbXG4gICAgICAgIHF1ZXJ5S2V5XG4gICAgXTtcbiAgICBjb25zdCBbcGF0aCwgaW5wdXRdID0gcXVlcnlLZXlBcnJheWVkO1xuICAgIGNvbnN0IGFycmF5UGF0aCA9IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJyB8fCBwYXRoID09PSAnJyA/IFtdIDogcGF0aC5zcGxpdCgnLicpO1xuICAgIC8vIENvbnN0cnVjdCBhIHF1ZXJ5IGtleSB0aGF0IGlzIGVhc3kgdG8gZGVzdHJ1Y3R1cmUgYW5kIGZsZXhpYmxlIGZvclxuICAgIC8vIHBhcnRpYWwgc2VsZWN0aW5nIGV0Yy5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHJwYy90cnBjL2lzc3Vlcy8zMTI4XG4gICAgaWYgKCFpbnB1dCAmJiAoIXR5cGUgfHwgdHlwZSA9PT0gJ2FueScpKSAvLyBmb3IgYHV0aWxzLmludmFsaWRhdGUoKWAgdG8gbWF0Y2ggYWxsIHF1ZXJpZXMgKGluY2x1ZGluZyB2YW5pbGxhIHJlYWN0LXF1ZXJ5KVxuICAgIC8vIHdlIGRvbid0IHdhbnQgbmVzdGVkIGFycmF5IGlmIHBhdGggaXMgZW1wdHksIGkuZS4gYFtdYCBpbnN0ZWFkIG9mIGBbW11dYFxuICAgIHJldHVybiBhcnJheVBhdGgubGVuZ3RoID8gW1xuICAgICAgICBhcnJheVBhdGhcbiAgICBdIDogW107XG4gICAgcmV0dXJuIFtcbiAgICAgICAgYXJyYXlQYXRoLFxuICAgICAgICB7XG4gICAgICAgICAgICAuLi50eXBlb2YgaW5wdXQgIT09ICd1bmRlZmluZWQnICYmIHtcbiAgICAgICAgICAgICAgICBpbnB1dDogaW5wdXRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi50eXBlICYmIHR5cGUgIT09ICdhbnknICYmIHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdO1xufVxuXG5leHBvcnQgeyBnZXRBcnJheVF1ZXJ5S2V5IGFzIGcgfTtcbiJdLCJuYW1lcyI6WyJnZXRBcnJheVF1ZXJ5S2V5IiwicXVlcnlLZXkiLCJ0eXBlIiwicXVlcnlLZXlBcnJheWVkIiwiQXJyYXkiLCJpc0FycmF5IiwicGF0aCIsImlucHV0IiwiYXJyYXlQYXRoIiwic3BsaXQiLCJsZW5ndGgiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/index.mjs":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/index.mjs ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.TRPCClientError),\n/* harmony export */   TRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.clientCallTypeToProcedureType),\n/* harmony export */   createReactQueryHooks: () => (/* binding */ createReactQueryHooks),\n/* harmony export */   createTRPCClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCProxyClient),\n/* harmony export */   createTRPCReact: () => (/* binding */ createTRPCReact),\n/* harmony export */   createTRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.getFetch),\n/* harmony export */   getQueryKey: () => (/* reexport safe */ _createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   getUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpBatchLink),\n/* harmony export */   httpLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.splitLink),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/./node_modules/.pnpm/@trpc+client@10.45.2_@trpc+server@10.45.2/node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createHooksInternal-063195fc.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/createHooksInternal-063195fc.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/.pnpm/@trpc+server@10.45.2/node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_@babel+core@7.28.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getArrayQueryKey-86134f8b.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\");\n\n\n\n\n\n\n\n/**\n * @internal\n */ function createHooksInternalProxy(trpc) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__.createFlatProxy)((key)=>{\n        if (key === \"useContext\" || key === \"useUtils\") {\n            return ()=>{\n                const context = trpc.useUtils();\n                // create a stable reference of the utils context\n                return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n                    return (0,_createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(context);\n                }, [\n                    context\n                ]);\n            };\n        }\n        if (trpc.hasOwnProperty(key)) {\n            return trpc[key];\n        }\n        return (0,_createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(key, trpc);\n    });\n}\nfunction createTRPCReact(opts) {\n    const hooks = (0,_createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(opts);\n    const proxy = createHooksInternalProxy(hooks);\n    return proxy;\n}\n// interop:\n/**\n * @deprecated use `createTRPCReact` instead\n */ function createReactQueryHooks(opts) {\n    const trpc = (0,_createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(opts);\n    const proxy = createHooksInternalProxy(trpc);\n    return {\n        ...trpc,\n        proxy\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrcmVhY3QtcXVlcnlAMTAuNDUuMl9AdGFuc3RhY2srcmVhY3QtcXVlcnlANC4zNi4xX3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wX19yXzliYTZhN2Q0MDdlYzNmNDk5ZTM2NmI0NGE0NTRhMzdhL25vZGVfbW9kdWxlcy9AdHJwYy9yZWFjdC1xdWVyeS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE2QjtBQUNtSDtBQUMxRTtBQUNoQjtBQUN0QjtBQUNEO0FBQ1U7QUFFekM7O0NBRUMsR0FBRyxTQUFTVSx5QkFBeUJDLElBQUk7SUFDdEMsT0FBT0gsb0VBQWVBLENBQUMsQ0FBQ0k7UUFDcEIsSUFBSUEsUUFBUSxnQkFBZ0JBLFFBQVEsWUFBWTtZQUM1QyxPQUFPO2dCQUNILE1BQU1DLFVBQVVGLEtBQUtHLFFBQVE7Z0JBQzdCLGlEQUFpRDtnQkFDakQsT0FBT0wsOENBQU9BLENBQUM7b0JBQ1gsT0FBT04sb0VBQTBCQSxDQUFDVTtnQkFDdEMsR0FBRztvQkFDQ0E7aUJBQ0g7WUFDTDtRQUNKO1FBQ0EsSUFBSUYsS0FBS0ksY0FBYyxDQUFDSCxNQUFNO1lBQzFCLE9BQU9ELElBQUksQ0FBQ0MsSUFBSTtRQUNwQjtRQUNBLE9BQU9QLG9FQUEwQkEsQ0FBQ08sS0FBS0Q7SUFDM0M7QUFDSjtBQUNBLFNBQVNLLGdCQUFnQkMsSUFBSTtJQUN6QixNQUFNQyxRQUFRakIsb0VBQW1CQSxDQUFDZ0I7SUFDbEMsTUFBTUUsUUFBUVQseUJBQXlCUTtJQUN2QyxPQUFPQztBQUNYO0FBRUEsV0FBVztBQUNYOztDQUVDLEdBQUcsU0FBU0Msc0JBQXNCSCxJQUFJO0lBQ25DLE1BQU1OLE9BQU9WLG9FQUFtQkEsQ0FBQ2dCO0lBQ2pDLE1BQU1FLFFBQVFULHlCQUF5QkM7SUFDdkMsT0FBTztRQUNILEdBQUdBLElBQUk7UUFDUFE7SUFDSjtBQUNKO0FBRWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdGdwdC1jbG9uZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytyZWFjdC1xdWVyeUAxMC40NS4yX0B0YW5zdGFjaytyZWFjdC1xdWVyeUA0LjM2LjFfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjBfX3JfOWJhNmE3ZDQwN2VjM2Y0OTllMzY2YjQ0YTQ1NGEzN2Evbm9kZV9tb2R1bGVzL0B0cnBjL3JlYWN0LXF1ZXJ5L2Rpc3QvaW5kZXgubWpzP2ZkMzQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnQHRycGMvY2xpZW50JztcbmltcG9ydCB7IGMgYXMgY3JlYXRlSG9va3NJbnRlcm5hbCwgYSBhcyBjcmVhdGVSZWFjdFF1ZXJ5VXRpbHNQcm94eSwgYiBhcyBjcmVhdGVSZWFjdFByb3h5RGVjb3JhdGlvbiB9IGZyb20gJy4vY3JlYXRlSG9va3NJbnRlcm5hbC0wNjMxOTVmYy5tanMnO1xuZXhwb3J0IHsgZyBhcyBnZXRRdWVyeUtleSB9IGZyb20gJy4vY3JlYXRlSG9va3NJbnRlcm5hbC0wNjMxOTVmYy5tanMnO1xuaW1wb3J0IHsgY3JlYXRlRmxhdFByb3h5IH0gZnJvbSAnQHRycGMvc2VydmVyL3NoYXJlZCc7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuaW1wb3J0ICcuL2dldEFycmF5UXVlcnlLZXktODYxMzRmOGIubWpzJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBjcmVhdGVIb29rc0ludGVybmFsUHJveHkodHJwYykge1xuICAgIHJldHVybiBjcmVhdGVGbGF0UHJveHkoKGtleSk9PntcbiAgICAgICAgaWYgKGtleSA9PT0gJ3VzZUNvbnRleHQnIHx8IGtleSA9PT0gJ3VzZVV0aWxzJykge1xuICAgICAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRycGMudXNlVXRpbHMoKTtcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBzdGFibGUgcmVmZXJlbmNlIG9mIHRoZSB1dGlscyBjb250ZXh0XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZU1lbW8oKCk9PntcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlYWN0UXVlcnlVdGlsc1Byb3h5KGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJwYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJwY1trZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVSZWFjdFByb3h5RGVjb3JhdGlvbihrZXksIHRycGMpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlVFJQQ1JlYWN0KG9wdHMpIHtcbiAgICBjb25zdCBob29rcyA9IGNyZWF0ZUhvb2tzSW50ZXJuYWwob3B0cyk7XG4gICAgY29uc3QgcHJveHkgPSBjcmVhdGVIb29rc0ludGVybmFsUHJveHkoaG9va3MpO1xuICAgIHJldHVybiBwcm94eTtcbn1cblxuLy8gaW50ZXJvcDpcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGBjcmVhdGVUUlBDUmVhY3RgIGluc3RlYWRcbiAqLyBmdW5jdGlvbiBjcmVhdGVSZWFjdFF1ZXJ5SG9va3Mob3B0cykge1xuICAgIGNvbnN0IHRycGMgPSBjcmVhdGVIb29rc0ludGVybmFsKG9wdHMpO1xuICAgIGNvbnN0IHByb3h5ID0gY3JlYXRlSG9va3NJbnRlcm5hbFByb3h5KHRycGMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnRycGMsXG4gICAgICAgIHByb3h5XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUmVhY3RRdWVyeUhvb2tzLCBjcmVhdGVUUlBDUmVhY3QgfTtcbiJdLCJuYW1lcyI6WyJjIiwiY3JlYXRlSG9va3NJbnRlcm5hbCIsImEiLCJjcmVhdGVSZWFjdFF1ZXJ5VXRpbHNQcm94eSIsImIiLCJjcmVhdGVSZWFjdFByb3h5RGVjb3JhdGlvbiIsImciLCJnZXRRdWVyeUtleSIsImNyZWF0ZUZsYXRQcm94eSIsInVzZU1lbW8iLCJjcmVhdGVIb29rc0ludGVybmFsUHJveHkiLCJ0cnBjIiwia2V5IiwiY29udGV4dCIsInVzZVV0aWxzIiwiaGFzT3duUHJvcGVydHkiLCJjcmVhdGVUUlBDUmVhY3QiLCJvcHRzIiwiaG9va3MiLCJwcm94eSIsImNyZWF0ZVJlYWN0UXVlcnlIb29rcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+react-query@10.45.2_@tanstack+react-query@4.36.1_react-dom@18.2.0_react@18.2.0__r_9ba6a7d407ec3f499e366b44a454a37a/node_modules/@trpc/react-query/dist/index.mjs\n");

/***/ })

};
;